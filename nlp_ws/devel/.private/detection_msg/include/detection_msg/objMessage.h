// Generated by gencpp from file detection_msg/objMessage.msg
// DO NOT EDIT!


#ifndef DETECTION_MSG_MESSAGE_OBJMESSAGE_H
#define DETECTION_MSG_MESSAGE_OBJMESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace detection_msg
{
template <class ContainerAllocator>
struct objMessage_
{
  typedef objMessage_<ContainerAllocator> Type;

  objMessage_()
    : obj()
    , score(0.0)  {
    }
  objMessage_(const ContainerAllocator& _alloc)
    : obj(_alloc)
    , score(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _obj_type;
  _obj_type obj;

   typedef double _score_type;
  _score_type score;





  typedef boost::shared_ptr< ::detection_msg::objMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::detection_msg::objMessage_<ContainerAllocator> const> ConstPtr;

}; // struct objMessage_

typedef ::detection_msg::objMessage_<std::allocator<void> > objMessage;

typedef boost::shared_ptr< ::detection_msg::objMessage > objMessagePtr;
typedef boost::shared_ptr< ::detection_msg::objMessage const> objMessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::detection_msg::objMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::detection_msg::objMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::detection_msg::objMessage_<ContainerAllocator1> & lhs, const ::detection_msg::objMessage_<ContainerAllocator2> & rhs)
{
  return lhs.obj == rhs.obj &&
    lhs.score == rhs.score;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::detection_msg::objMessage_<ContainerAllocator1> & lhs, const ::detection_msg::objMessage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace detection_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::detection_msg::objMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::detection_msg::objMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::detection_msg::objMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::detection_msg::objMessage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detection_msg::objMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detection_msg::objMessage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::detection_msg::objMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0ee8aa243ed15ae7496db1e213d462ca";
  }

  static const char* value(const ::detection_msg::objMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0ee8aa243ed15ae7ULL;
  static const uint64_t static_value2 = 0x496db1e213d462caULL;
};

template<class ContainerAllocator>
struct DataType< ::detection_msg::objMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "detection_msg/objMessage";
  }

  static const char* value(const ::detection_msg::objMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::detection_msg::objMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string obj\n"
"float64 score\n"
;
  }

  static const char* value(const ::detection_msg::objMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::detection_msg::objMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.obj);
      stream.next(m.score);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct objMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::detection_msg::objMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::detection_msg::objMessage_<ContainerAllocator>& v)
  {
    s << indent << "obj: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.obj);
    s << indent << "score: ";
    Printer<double>::stream(s, indent + "  ", v.score);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DETECTION_MSG_MESSAGE_OBJMESSAGE_H
